open Utils 
(* open Smt  *)

type specification = int * int * example list * example list 
and example = int list 

let spec1 = (10, 2, 
[
  [0; 1]; 
  [1; 0]
], 
[
  [1; 1]; 
  [0; 0]
])

let spec2 = (10, 2, 
[
  [1; 1]
], 
[
  [0; 1]; 
  [1; 0]; 
  [0; 0]
])

let spec3 = (10, 3, 
[
  [0;0;0]; 
  [0;1;0];
  [1;0;0];
  [1;1;0];
], 
[
  [0;0;1]; 
  [0;1;1];
  [1;0;1];
  [1;1;1];
])

let spec4 = (10, 4, 
[
  [0;0;0;1]; 
  [0;0;1;1];
  [0;1;0;1];
  [1;0;0;1];
  [1;0;1;1];
  [1;1;0;1];
  [1;1;1;0];
], 
[
  [0;0;0;0];
  [0;0;1;0];
  [0;1;0;0];
  [0;1;1;0];
  [0;1;1;1];
  [1;0;0;0];
  [1;0;1;0];
  [1;1;0;0];
])

let spec5 = (20, 20, 
[
  [1;1;0;0;1;0;0;1;0;0;0;0;1;1;1;1;1;1;0;1];
  [1;0;1;0;1;0;1;0;0;0;1;0;0;0;1;0;0;0;0;1];
  [0;1;1;0;1;0;0;0;1;1;0;0;0;0;1;0;0;0;1;1];
  [0;1;0;0;1;1;0;0;0;1;0;0;1;1;0;0;0;1;1;0];
  [0;1;1;0;0;0;1;0;1;0;0;0;1;0;1;1;1;0;0;0];
  [0;0;0;0;1;1;0;1;1;1;0;0;0;0;0;1;1;1;0;0];
  [1;1;0;1;0;0;0;1;0;0;1;0;1;0;0;1;0;0;0;0];
  [0;0;1;0;0;1;0;0;1;1;1;0;0;0;0;0;1;0;0;0];
  [1;0;0;0;1;0;1;0;0;1;1;0;0;1;1;1;1;1;0;0];
  [1;1;0;0;0;1;1;1;0;1;0;0;0;0;0;0;0;0;1;0];
  [0;0;0;0;1;0;1;1;1;0;1;1;1;1;1;0;1;0;1;0];
  [0;1;1;0;0;0;1;1;1;0;1;1;0;0;0;1;0;0;1;1];
  [1;0;0;1;1;0;1;1;0;0;1;0;0;0;1;0;0;1;0;1];
  [0;0;0;1;0;1;0;0;1;0;1;0;0;0;0;0;1;0;0;0];
  [0;1;1;1;1;0;0;1;1;0;0;0;1;1;1;0;0;0;1;1];
  [0;1;0;0;0;0;0;0;0;1;0;0;1;1;0;1;1;1;0;1];
], 
[
  [1;0;1;0;1;1;0;1;1;1;1;1;1;0;0;0;0;1;0;1];
  [0;1;0;0;0;1;0;1;1;0;0;0;1;0;1;0;0;0;1;0];
  [1;0;1;1;1;0;1;1;0;1;0;0;1;0;1;0;1;0;0;1];
  [1;0;1;0;1;0;1;0;1;1;1;1;1;1;0;1;1;1;0;0];
  [0;1;0;1;0;1;1;0;0;0;1;0;0;0;0;0;0;0;1;0];
  [0;1;1;1;0;0;1;1;1;1;0;1;0;0;1;1;1;1;0;0];
  [1;1;1;1;0;0;0;1;1;1;0;1;1;0;0;0;1;0;1;1];
  [1;0;0;1;1;1;0;0;0;1;0;1;1;0;0;0;0;0;1;1];
  [1;1;0;0;1;1;1;0;0;0;1;0;1;1;0;1;0;0;1;1];
  [0;1;1;0;1;0;0;1;0;1;0;1;1;0;1;0;1;0;0;1];
  [1;1;1;0;0;0;0;1;0;0;1;1;0;1;1;0;0;1;0;0];
  [0;0;0;1;0;0;0;1;0;1;0;0;0;1;1;0;0;1;0;0];
  [0;0;1;1;0;0;1;1;1;1;1;1;1;0;1;1;1;1;0;0];
  [1;1;0;0;1;0;0;1;0;0;1;1;1;0;0;1;1;1;0;1];
  [1;1;0;0;1;1;1;0;0;0;1;0;0;1;0;0;1;0;0;1];
  [1;0;1;1;0;0;1;1;1;1;1;0;1;1;1;1;1;0;0;1];
])

type dnf = conj list 
and conj = lit list 
and lit = X of int | NotX of int 

let string_of_lit lit = 
  match lit with 
  | X i -> "x" ^ string_of_int i 
  | NotX i -> "!x" ^ string_of_int i 
let string_of_conj conj = string_of_list string_of_lit conj ~sep:" /\\ " ~first:"(" ~last:")"
let string_of_dnf dnf = string_of_list string_of_conj dnf ~sep:" \\/ " ~first:"" ~last:""

let synthesize : specification -> dnf option  
=fun _ -> None (* TODO *)
